package models

import (
	"fmt"
	"mana/src/config"
	"mana/src/connections/database/mysql"
	"strconv"
	"time"
)

type kubeConfig struct {
	ID                         string `json:"id"`                         // id
	USERID                     string `json:"userid"`                     // 用户id
	CLUSTER_ALIAS              string `json:"cluster_alias"`              // 集群别名
	CLUSTER_USER               string `json:"cluster_user"`               // 集群权限用户
	CURRENT_CONTEXT            string `json:"current_context"`            // 上下文
	SERVER                     string `json:"server"`                     // 集群地址
	CREATION_TIME              string `json:"creation_time"`              // 创建时间
	STATUS                     string `json:"status"`                     // 配置文件配置状态
	CERTIFICATE_AUTHORITY_DATA string `json:"certificate_authority_data"` // CA证书
	CLIENT_CERTIFICATE_DATA    string `json:"client_certificate_data"`    // 用户证书
	CLIENT_KEY_DATA            string `json:"client_key_data"`            // 用户证书私钥
}

func NewKubeConfig() *kubeConfig {
	return &kubeConfig{
		USERID:                     "",
		CLUSTER_ALIAS:              "",
		CLUSTER_USER:               "",
		CURRENT_CONTEXT:            "",
		SERVER:                     "",
		CREATION_TIME:              "",
		STATUS:                     "1",
		CERTIFICATE_AUTHORITY_DATA: "",
		CLIENT_CERTIFICATE_DATA:    "",
		CLIENT_KEY_DATA:            "",
	}
}

// test
type AutoGenerated struct {
	MetaInfo metaInfos `json:"metaInfo"`
	Response resPonses `json:"response"`
}
type metaInfos struct {
	Msg         string `json:"msg"`
	RequestTime string `json:"requestTime"`
	Status      string `json:"status"`
}

type pageInfos struct {
	Page     string `json:"page"`
	PageNum  string `json:"pageNum"`
	PageSize string `json:"pageSize"`
	Total    string `json:"total"`
}
type resPonses struct {
	Items    interface{} `json:"items"`
	PageInfo pageInfos   `json:"pageInfo"`
}

//////////////////////////

var log = config.Log()

// 插入集群用户配置
func InstKubeConfig(k *kubeConfig) (string, error) {
	creationTime := time.Unix(time.Now().Unix(), 0).Format("2006-01-02 15:04:05")
	k.CREATION_TIME = creationTime

	// 插入用户表信息
	sqlStr1 := `INSERT INTO kube_config (USERID, CLUSTER_ALIAS, CLUSTER_USER, CURRENT_CONTEXT,
                         SERVER, CREATION_TIME, STATUS, CERTIFICATE_AUTHORITY_DATA, CLIENT_CERTIFICATE_DATA, CLIENT_KEY_DATA)
                         VALUES (?,?,?,?,?,?,?,?,?,?);`
	ret, err := mysql.DB.Exec(sqlStr1, k.USERID, k.CLUSTER_ALIAS, k.CLUSTER_USER, k.CURRENT_CONTEXT,
		k.SERVER, k.CREATION_TIME, k.STATUS, k.CERTIFICATE_AUTHORITY_DATA, k.CLIENT_CERTIFICATE_DATA, k.CLIENT_KEY_DATA)

	if err != nil {
		log.Error("insert kubeConfig failed,", err)
		return "", err
	}

	theID, err := ret.LastInsertId() // 新插入数据的id
	if err != nil {
		log.Error("get last Insert ID failed, err:", err)
		return "", err
	}

	return strconv.FormatInt(theID, 10), err
}

func FindByKubeConfigs(k *kubeConfig, uid string, pageSize int, page int) interface{} {
	n := (page - 1) * pageSize
	m := pageSize
	sqlStr := `SELECT ID, USERID, CLUSTER_ALIAS, CLUSTER_USER, CURRENT_CONTEXT,
                         SERVER, CREATION_TIME, STATUS, CERTIFICATE_AUTHORITY_DATA, CLIENT_CERTIFICATE_DATA,
                         CLIENT_KEY_DATA FROM  kube_config WHERE USERID = ? ORDER BY USERID LIMIT ?, ?;`

	rows, err := mysql.DB.Query(sqlStr, uid, n, m)
	if err != nil {
		log.Error("exec  query failed, err", sqlStr, err)
	}
	//var k kubeConfig
	defer rows.Close()

	// map 处理
	// 列表外面的
	aa := make(map[string][]map[string]string)

	// items里面的map
	var items []map[string]string
	items = make([]map[string]string, 0)
	//fmt.Println(items)

	//City := make(map[string][]map[string]string) //定义市区的字典

	for rows.Next() {
		err := rows.Scan(&k.ID, &k.USERID, &k.CLUSTER_ALIAS, &k.CLUSTER_USER, &k.CURRENT_CONTEXT,
			&k.SERVER, &k.CREATION_TIME, &k.STATUS, &k.CERTIFICATE_AUTHORITY_DATA, &k.CLIENT_CERTIFICATE_DATA, &k.CLIENT_KEY_DATA)
		if err != nil {

			fmt.Println("error")
		}
		//fmt.Printf("u:%#v\n", k)

		//fmt.Println(k.ID)
		item := make(map[string]string)
		item["ID"] = k.ID
		item["USERID"] = k.USERID
		item["CLUSTER_ALIAS"] = k.CLUSTER_ALIAS
		item["CLUSTER_USER"] = k.CLUSTER_USER
		item["SERVER"] = k.SERVER
		item["CREATION_TIME"] = k.CREATION_TIME
		item["STATUS"] = k.STATUS
		//item["CERTIFICATE_AUTHORITY_DATA"] = k.CERTIFICATE_AUTHORITY_DATA
		//item["CLIENT_CERTIFICATE_DATA"] = k.CLIENT_CERTIFICATE_DATA
		//item["CLIENT_KEY_DATA"] = k.CLIENT_KEY_DATA

		//City["item"] = []map[string]string{item}
		//City = append(City, item)
		items = append(items, item)
	}
	aa["items"] = items

	// test 整体结构
	pageInfo := make(map[string]string)
	pageInfo["pageSize"] = "10"
	pageInfo["pageNum"] = "10"
	pageInfo["page"] = "10"
	pageInfo["total"] = "10"

	// metaInfo定义
	metaInfo := make(map[string]string)
	metaInfo["status"] = "200"
	metaInfo["msg"] = "该接口被请求返回的消息，成功、失败，或其他相关说明"
	metaInfo["requestTime"] = "1234567"

	// map序列化
	//data, _ := json.Marshal(aa)
	//mString := string(data)
	//fmt.Println(mString)

	// response 定义
	response := make(map[string]interface{})
	response["pageInfo"] = pageInfo
	response["items"] = items

	// 最外层
	jsons := make(map[string]interface{})
	jsons["metaInfo"] = metaInfo
	jsons["response"] = response

	//data, _ := json.Marshal(jsons)
	//mString := string(data)
	//fmt.Println(mString)

	////////////////////////
	// 使用结构体
	var tt AutoGenerated
	tt.Response.Items = items

	return &tt
}
